{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Hello World Template repository for getting started with and deploying a MkDocs project About This repository demonstrates how to create a static site using MkDocs . This repository does not demonstrate how to convert API docstrings into API documentation. In addition to writing static site content, this repository contains pre-commit hooks, config files, a simple \"Hello World\" website, Makefile directives to build the site into HTML files, and a GitHub Action workflow to deploy the site onto GitHub pages. All dependencies are listed in the pyproject.toml file in the root of the directory. How To Develop Assuming that you have cloned the repository: make create-dev This will create a Python virtual environment, install Poetry into it, and download dependencies managed by Poetry. Config Files The following config files can be found in the root of the directory: pyproject.toml : Poetry project config file mkdocs.yml : MkDocs config file .markdownlint.json : Markdown Lint config file .mdformat.toml : MD Format config file .pre-commit-config.json : pre-commit config file config file How To Build make build-html to build the HTML version of the site, or HTML The HTML content of the site is stored in the root level html directory. How To Deploy make deploy-gh will commit the current project root-level html directory to the root of a gh-pages branch. Once executed, in your GitHub project, confgure GitHub Pages to read from the root of the gh-pages branch.","title":"Home"},{"location":"#hello-world","text":"Template repository for getting started with and deploying a MkDocs project","title":"Hello World"},{"location":"#about","text":"This repository demonstrates how to create a static site using MkDocs . This repository does not demonstrate how to convert API docstrings into API documentation. In addition to writing static site content, this repository contains pre-commit hooks, config files, a simple \"Hello World\" website, Makefile directives to build the site into HTML files, and a GitHub Action workflow to deploy the site onto GitHub pages. All dependencies are listed in the pyproject.toml file in the root of the directory.","title":"About"},{"location":"#how-to-develop","text":"Assuming that you have cloned the repository: make create-dev This will create a Python virtual environment, install Poetry into it, and download dependencies managed by Poetry.","title":"How To Develop"},{"location":"#config-files","text":"The following config files can be found in the root of the directory: pyproject.toml : Poetry project config file mkdocs.yml : MkDocs config file .markdownlint.json : Markdown Lint config file .mdformat.toml : MD Format config file .pre-commit-config.json : pre-commit config file config file","title":"Config Files"},{"location":"#how-to-build","text":"make build-html to build the HTML version of the site, or","title":"How To Build"},{"location":"#html","text":"The HTML content of the site is stored in the root level html directory.","title":"HTML"},{"location":"#how-to-deploy","text":"make deploy-gh will commit the current project root-level html directory to the root of a gh-pages branch. Once executed, in your GitHub project, confgure GitHub Pages to read from the root of the gh-pages branch.","title":"How To Deploy"},{"location":"about/","text":"Sample Page This is a sample of how to have a second page with MkDocs.","title":"About"},{"location":"about/#sample-page","text":"This is a sample of how to have a second page with MkDocs.","title":"Sample Page"}]}